services:
  postgres:
    image: postgres:17-alpine
    container_name: postgres-app
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123
      POSTGRES_DB: bdaula
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5433:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./src/configs/comandos.sql:/docker-entrypoint-initdb.d/comandos.sql:ro
    networks:
      - app-network
    profiles: ["start"]

  redis:
    image: redis:8-alpine
    container_name: redis-app
    restart: always
    command: redis-server --requirepass 123
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - redisdata:/data
    networks:
      - app-network
    profiles: ["start"]

  node:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: node-app
    ports:
      - "3001:3000"
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network
    profiles: ["start"]

  postgres-test:
    image: postgres:17-alpine
    container_name: postgres-test
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123
      POSTGRES_DB: bdaula
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    tmpfs:
      - /var/lib/postgresql/data
    volumes:
      - ./src/configs/comandos.sql:/docker-entrypoint-initdb.d/comandos.sql:ro
    networks:
      - test-network
    profiles: ["test"]

  redis-test:
    image: redis:8-alpine
    container_name: redis-test
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
    networks:
      - test-network
    profiles: ["test"]

  node-test:
    build:
      context: .
      dockerfile: Dockerfile.test
    container_name: node-test
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
    networks:
      - test-network
    volumes:
      - ./coverage:/app/coverage # Para persistir o relat√≥rio de cobertura
    profiles: ["test"]

volumes:
  pgdata:
  redisdata:

networks:
  app-network:
    driver: bridge
  test-network:
    driver: bridge
